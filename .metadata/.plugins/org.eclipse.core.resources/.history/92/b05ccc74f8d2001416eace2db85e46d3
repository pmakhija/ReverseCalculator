package main.java;
import java.util.Stack;




public class RPNPostFix {
	
	public double calculate(String[] arr) throws Exception{
		
		Stack<Double> inputStack = new Stack<Double>();
		double result=0;
		for(int i=0; i<arr.length; i++){

			try{
				inputStack.push(Double.parseDouble(arr[i]));
			}catch(Exception e){
				
				if(("\\+\\-\\*\\/\\^").contains(arr[i])){
					double rightVariable = inputStack.pop();
					double leftVariable = inputStack.pop();
				
					OperatorFactory.getBinaryOperations(arr[i]).calculate(leftVariable,rightVariable);
				}
				
				
				switch(arr[i]){
				case "+": 
					rightVariable = inputStack.pop();
					leftVariable = inputStack.pop(); 
					result = leftVariable + rightVariable;
					inputStack.push(result);
					break;
				case "-": 
					rightVariable = inputStack.pop();
					leftVariable = inputStack.pop();
					result = leftVariable - rightVariable;
					inputStack.push(result);
					break;
				case "*": 
					 rightVariable = inputStack.pop();
					 leftVariable = inputStack.pop();
					result = leftVariable * rightVariable;
					inputStack.push(result);
					break;
				case "/":
					rightVariable = inputStack.pop();
					leftVariable = inputStack.pop();
					result = leftVariable / rightVariable;
					inputStack.push(result);
					break;
				case "!":
					rightVariable = inputStack.pop();
					result = 1;
					if(rightVariable < 0)
						throw new Exception("Factorial cannot be calculated for negative");
					
					for (int c = 1 ; c <= rightVariable ; c++ )
			            result = result*c;
			 		inputStack.push(result);
					break;
				case "%":
					rightVariable = inputStack.pop();
					result = rightVariable/100;
					inputStack.push(result);
					break;
					
				case "^":
					 rightVariable = inputStack.pop();
					 leftVariable = inputStack.pop();
					
					result = 1;
				    for (int j = 0; j < rightVariable; j++) {
				        result *= leftVariable;
				    }
				    inputStack.push(result);
					break;
					
				default: throw new Exception();
				}
			}
		}
		return result;
	}

}
