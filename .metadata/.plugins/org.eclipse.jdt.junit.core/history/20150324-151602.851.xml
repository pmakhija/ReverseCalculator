<?xml version="1.0" encoding="UTF-8"?><testrun name="TestRPNPostfix" project="ReverseNotationCalculator" tests="26" started="26" failures="1" errors="0" ignored="0">
  <testsuite name="test.java.TestRPNPostfix" time="0.015">
    <testcase name="testFloatMultiplyOperator" classname="test.java.TestRPNPostfix" time="0.008"/>
    <testcase name="testNegativeBothOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testNegativeBothDivideOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testNegativeSingleDivideOperator" classname="test.java.TestRPNPostfix" time="0.001"/>
    <testcase name="testMultipleIntegerOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testIntegerMinusOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testNegativeBothMultiplyOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testZeroDivideOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testExceptionMinusOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testFloatDivideOperator" classname="test.java.TestRPNPostfix" time="0.001"/>
    <testcase name="testFloatOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testNegativeBothMinusOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testNegativeSingleMultiplyOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testNegativeSingleMinusOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testFactorialOperator" classname="test.java.TestRPNPostfix" time="0.002">
      <failure>junit.framework.AssertionFailedError: expected:&lt;120.0&gt; but was:&lt;10.0&gt;&#13;
	at junit.framework.Assert.fail(Assert.java:57)&#13;
	at junit.framework.Assert.failNotEquals(Assert.java:329)&#13;
	at junit.framework.Assert.assertEquals(Assert.java:78)&#13;
	at junit.framework.Assert.assertEquals(Assert.java:86)&#13;
	at test.java.TestRPNPostfix.testFactorialOperator(TestRPNPostfix.java:293)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testIntegerMultiplyOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testExceptionMultiplyOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testFloatMinusOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testIntegerOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testIntegerDivideOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testNegativeSingleOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testZeroMultiplyOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testExceptionOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testExceptionDivideOperator" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testMultipleOperators" classname="test.java.TestRPNPostfix" time="0.0"/>
    <testcase name="testMultipleOperators2" classname="test.java.TestRPNPostfix" time="0.001"/>
  </testsuite>
</testrun>
